type: edu
custom_name: stage3
files:
- name: tests.py
  visible: false
  text: |
    from hstest.stage_test import *
    from hstest.test_case import TestCase
    from enum import Enum
    from typing import List, Optional
    from copy import deepcopy

    CheckResult.correct = lambda: CheckResult(True, '')
    CheckResult.wrong = lambda feedback: CheckResult(False, feedback)


    class FieldState(Enum):
        X = 'X'
        O = 'O'
        FREE = ' '


    def get_state(symbol):
        if symbol == 'X':
            return FieldState.X
        elif symbol == 'O':
            return FieldState.O
        elif symbol == ' ' or symbol == '_':
            return FieldState.FREE
        else:
            return None


    class TicTacToeField:

        def __init__(self, *, field: str = '', constructed=None):

            if constructed is not None:
                self.field = deepcopy(constructed)

            else:
                self.field: List[List[Optional[FieldState]]] = [
                    [None for _ in range(3)] for _ in range(3)
                ]

                for row in range(3):
                    for col in range(3):
                        index = (2 - row) * 3 + col
                        self.field[row][col] = get_state(field[index])

        def equal_to(self, other) -> bool:
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        return False
            return True

        def has_next_as(self, other) -> bool:
            improved: bool = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if self.field[i][j] == FieldState.FREE and not improved:
                            improved = True
                        else:
                            return False
            return improved

        def differ_by_one(self, other) -> bool:
            have_single_difference = False
            for i in range(3):
                for j in range(3):
                    if self.field[i][j] != other.field[i][j]:
                        if have_single_difference:
                            return False
                        have_single_difference = True
            return have_single_difference

        def is_close_to(self, other) -> bool:
            return (
                self.equal_to(other)
                or self.has_next_as(other)
                or other.has_next_as(self)
            )

        @staticmethod
        def parse(field_str: str):

            lines = field_str.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if
                     i.startswith('|') and i.endswith('|')]

            for line in lines:
                for c in line:
                    if c not in 'XO|_ ':
                        return None

            field: List[List[Optional[FieldState]]] = [
                [None for _ in range(3)] for _ in range(3)
            ]

            y: int = 2

            for line in lines:
                cols = line[2], line[4], line[6]
                x: int = 0
                for c in cols:
                    state = get_state(c)
                    if state is None:
                        return None
                    field[y][x] = state
                    x += 1
                y -= 1

            return TicTacToeField(constructed=field)

        @staticmethod
        def parse_all(output: str):
            fields = []

            lines = output.splitlines()
            lines = [i.strip() for i in lines]
            lines = [i for i in lines if len(i) > 0]

            candidate_field = ''
            inside_field = False
            for line in lines:
                if '----' in line and not inside_field:
                    inside_field = True
                    candidate_field = ''
                elif '----' in line and inside_field:
                    field = TicTacToeField.parse(candidate_field)
                    if field is not None:
                        fields += [field]
                    inside_field = False

                if inside_field and line.startswith('|'):
                    candidate_field += line + '\n'

            return fields


    inputs = [
        "1 1", "1 2", "1 3",
        "2 1", "2 2", "2 3",
        "3 1", "3 2", "3 3"
    ]


    def iterate_cells(initial: str) -> str:
        index: int = -1
        for i in range(len(inputs)):
            if initial == inputs[i]:
                index = i
                break

        if index == -1:
            return ''

        full_input: str = ''
        for i in range(index, index + 9):
            full_input += inputs[i % len(inputs)] + '\n'

        return full_input


    class TicTacToeTest(StageTest):
        def generate(self) -> List[TestCase]:
            tests: List[TestCase] = []

            i: int = 0
            for input in inputs:
                full_move_input = iterate_cells(input)

                str_nums = input.split()
                x = int(str_nums[0])
                y = int(str_nums[1])

                if i % 2 == 1:
                    full_move_input = f'4 {i}\n' + full_move_input

                full_game_input = ''
                for _ in range(9):
                    full_game_input += full_move_input

                if i % 2 == 0:
                    initial = "start user easy\n"
                else:
                    initial = "start easy user\n"

                full_game_input = initial + full_game_input + "exit"

                tests += [TestCase(stdin=full_game_input)]

                i += 1

            tests += [TestCase(stdin="start easy easy\nexit")]

            tests += [TestCase(stdin=
                               "start user user\n" +
                               "1 1\n" +
                               "2 2\n" +
                               "1 2\n" +
                               "2 1\n" +
                               "1 3\n" +
                               "exit")]

            return tests

        def check(self, reply: str, attach: str) -> CheckResult:

            fields = TicTacToeField.parse_all(reply)

            if len(fields) == 0:
                return CheckResult.wrong(
                    "No fields found"
                )

            for i in range(1, len(fields)):
                curr: TicTacToeField = fields[i - 1]
                next: TicTacToeField = fields[i]

                stayed = curr.equal_to(next)
                improved = curr.has_next_as(next)

                if not (stayed or improved):
                    return CheckResult.wrong(
                        "For two fields following each " +
                        "other one is not a continuation " +
                        "of the other (they differ more than in two places)."
                    )

            return CheckResult.correct()


    if __name__ == '__main__':
        TicTacToeTest('tictactoe.tictactoe').run_tests()
  learner_created: false
- name: tictactoe/tictactoe.py
  visible: true
  text: |2


    class TicTacToe:

        possible_cell_states = 'XO_'
        cell_map = {(1, 3): 0, (2, 3): 1, (3, 3): 2,
                    (1, 2): 3, (2, 2): 4, (3, 2): 5,
                    (1, 1): 6, (2, 1): 7, (3, 1): 8}
        lines = [(0, 1, 2), (3, 4, 5), (6, 7, 8),
                 (0, 3, 6), (1, 4, 7), (2, 5, 8),
                 (0, 4, 8), (2, 4, 6)]

        def __init__(self, cells=""):
            self.field = ['_' for _x in range(9)]
            self.game_over = False
            self.difficulty = 1
            if len(cells) == 9:
                for i in range(9):
                    if cells[i] in TicTacToe.possible_cell_states:
                        self.field[i] = cells[i]

        def __str__(self):
            return f"""---------
    | {' '.join([self.field[i] if self.field[i] in 'XO' else ' ' for i in range(3) ])} |
    | {' '.join([self.field[i] if self.field[i] in 'XO' else ' ' for i in range(3, 6)])} |
    | {' '.join([self.field[i] if self.field[i] in 'XO' else ' ' for i in range(6, 9)])} |
    ---------"""

        def __repr__(self):
            res = ''
            for i in range(3):
                for j in range(3):
                    res += self.field[i*3+j]
                res += "\n"
            return res

        def AI_move(self):
            if self.difficulty == 1:
                print('Making move level "easy"')
                self.easy_AI_move()
            if self.difficulty == 2:
                pass
            if self.difficulty == 3:
                pass

        def easy_AI_move(self):
            from random import randint
            if self.field.count('_') == 0:
                self.game_over = True
                print(self)
                print("Draw")
                return True
            coor = tuple(randint(1, 3) for _i in range(2))
            cell = TicTacToe.cell_map[coor]
            if self.field[cell] in "XO":
                return self.easy_AI_move()
            else:
                self.field[cell] = 'O'
                if self.check_cell(cell):
                    self.game_over = True
                    return True
                else:
                    return False

        def player_move(self):
            if self.field.count('_') == 0:
                self.game_over = True
                print(self)
                print("Draw")
                return True
            try:
                coor = tuple(map(int, input("Enter the coordinates:").split(maxsplit=1)))
                cell = TicTacToe.cell_map[coor]
                if self.field[cell] in "XO":
                    print("This cell is occupied! Choose another one!")
                    return self.player_move()
                else:
                    self.field[cell] = 'X'
                    if self.check_cell(cell):
                        self.game_over = True
                        return True
                    else:
                        return False
            except ValueError:
                print("You should enter numbers!")
                return self.player_move()
            except KeyError:
                print("Coordinates should be from 1 to 3!")
                return self.player_move()

        # check all lines that contain cell with [index], used after adding element
        def check_cell(self, index):
            for line in TicTacToe.lines:
                if index in line:
                    line = "".join([self.field[i] for i in line])
                    if line == "XXX":
                        print(self)
                        print("X wins")
                        return True
                    elif line == "OOO":
                        print(self)
                        print("O wins")
                        return True
            else:
                print(self)
                if self.field.count("_") == 0:
                    print("Draw")
                    return True
                else:
                    return False

        def check_field(self):
            for line in TicTacToe.lines:
                line = "".join([self.field[i] for i in line])
                if line == "XXX":
                    print(self)
                    print("X wins")
                    return
                elif line == "OOO":
                    print(self)
                    print("O wins")
                    return
            else:
                print(self)
                print("Draw")

        def play_game(self):
            print(self)
            while not self.game_over:
                if self.player_move():
                    break
                if self.AI_move():
                    break


    def main():
        game = TicTacToe()
        game.play_game()


    if __name__ == "__main__":
        main()
  learner_created: true
feedback_link: https://hyperskill.org/projects/82/stages/454/implement
status: Solved
record: 3
